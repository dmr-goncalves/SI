import org.simbrain.network.NetworkComponent;
import org.simbrain.network.connections.*;
import org.simbrain.network.core.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.networks.*;
import org.simbrain.network.neurons.*;
import org.simbrain.util.randomizer.*;
import org.simbrain.util.SimbrainConstants.Polarity;
import org.simbrain.util.math.*;
import org.simbrain.workspace.*;

{

    // Parameters 
    int NUM_NEURONS = 100;
    double GRID_SPACE = 50;
    double EXCITATORY_RATIO = .4;
    double SPARSITY = .02;
    double INHIBITORY_MEAN = 10;
    double EXCITATORY_MEAN = 40;

    // Build Network
    NetworkComponent networkComponent = new NetworkComponent("Network");
    workspace.addWorkspaceComponent(networkComponent);
    Network network = networkComponent.getNetwork();
    GridLayout layout = new GridLayout(GRID_SPACE, GRID_SPACE, (int) Math.sqrt(NUM_NEURONS));
    layout.setInitialLocation(new Point(10, 10));
    for (int i = 0; i < NUM_NEURONS; i++) {
        Neuron neuron = new Neuron(network, "NakaRushtonRule");
        neuron.setUpperBound(10);
        network.addNeuron(neuron);
    }
    layout.layoutNeurons(network.getNeuronList());

    // Create randomizers (param1 is mean, param2 is stdev)
    PolarizedRandomizer exciteRand = new PolarizedRandomizer(Polarity.EXCITATORY);
    exciteRand.setPdf(ProbDistribution.NORMAL);
    exciteRand.setParam2(EXCITATORY_MEAN);
    PolarizedRandomizer inhibRand = new PolarizedRandomizer(Polarity.INHIBITORY);
    inhibRand.setPdf(ProbDistribution.NORMAL);
    inhibRand.setParam2(INHIBITORY_MEAN);

    // Make sparse connections and randomize neurons
    List synapses = Sparse.connectSparse(network.getFlatNeuronList(),
            network.getFlatNeuronList(), SPARSITY, false, false, true);
    for(Synapse synapse : synapses) {
        synapse.setUpperBound(70);
    }
    ConnectionUtilities.randomizeAndPolarizeSynapses(synapses, exciteRand, inhibRand, EXCITATORY_RATIO);
    network.randomizeNeurons();
    network.fireSynapsesUpdated();

}