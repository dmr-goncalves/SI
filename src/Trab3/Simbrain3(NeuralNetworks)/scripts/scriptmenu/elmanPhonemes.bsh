import org.simbrain.network.NetworkComponent;
import org.simbrain.network.connections.*;
import org.simbrain.network.core.*;
import org.simbrain.network.groups.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.layouts.LineLayout.LineOrientation;
import org.simbrain.network.subnetworks.*;
import org.simbrain.network.neuron_update_rules.*;
import org.simbrain.network.synapse_update_rules.*;
import org.simbrain.network.trainers.*;
import org.simbrain.network.trainers.LMSOffline.SolutionType;
import org.simbrain.network.neurons.*;
import org.simbrain.util.*;
import org.simbrain.workspace.*;
import org.simbrain.util.SimbrainConstants.Polarity;
import org.simbrain.util.randomizer.*;
import org.simbrain.util.math.*;
import org.simbrain.util.projector.*;
import org.simbrain.world.textworld.*;
import org.simbrain.world.textworld.ReaderWorld.ParseStyle;
import java.io.*;
import java.awt.geom.Point2D;
import java.util.*;

//
// Elman 1990.   Trained to predict the next phoneme in a sequence.   Plot errors
// and note errors are more common at word boundaries.
//
// There are three words in the simple vocabulary: ba, dii, and guuu
//
// Authors: Jeff Yoshimi and Sam Spevak
//

//
// Adjustible parameters
//
int strlength = 200; // Length of the phoneme string for training. Elman used 1000.
int trainingSteps = 100; // How many iterations to train the SRN.  Elman used 200.
//
// Public variables
//
NetworkComponent networkComponent;
Network network;
SimpleRecurrentNetwork srn;
ReaderWorld readerWorld;
DisplayWorld displayWorld;
String phonemeString;
double[][] inputData;
double[][] targetData;

//
// Main parts of simulation
//
void main() {

    workspace.clearWorkspace();

    buildNetwork();
    buildReaderWorld();
    buildDisplayWorld();
    loadCustomUpdater();
    trainNetwork();
    srn.getInputLayer().setClamped(false);
    readerWorld.setPosition(0);

    // Manually configure the update order.  A bit hard-codey, but not sure what a cleaner
    // way to do it is.  Indices determined by checking the available actions in (desktop menu)
    // File > Edit Update Sequence > Add Action.   
    List actions = workspace.getUpdater().getUpdateManager().getAvailableActionList();
    workspace.getUpdater().getUpdateManager().clear();
    workspace.getUpdater().getUpdateManager().addAction(actions.get(4));
    workspace.getUpdater().getUpdateManager().addAction(actions.get(1));
    workspace.getUpdater().getUpdateManager().addAction(actions.get(2));
    workspace.getUpdater().getUpdateManager().addAction(actions.get(3));

    //loadTimeSeries
    //addDocs();
}

//
// Create and train the SRN
//
void buildNetwork() {
    networkComponent = new NetworkComponent("Elman Phoneme Predicter");
    network = networkComponent.getNetwork();
    srn = new SimpleRecurrentNetwork(network, 6, 20, 6);
    workspace.addWorkspaceComponent(networkComponent);
    desktop.getDesktopComponent(networkComponent).getParentFrame().setBounds(446,15,592,551);
    network.addGroup(srn);
    srn.getInputLayer().setLowerBound(0);      
    srn.getInputLayer().setUpperBound(1);      
    // srn.getHiddenLayer().setLowerBound(0);      
    // srn.getHiddenLayer().setUpperBound(1);      
    srn.getOutputLayer().setLowerBound(0);      
    srn.getOutputLayer().setUpperBound(1);      
}

//
// Train the SRN
//
void trainNetwork() {

    // Set up training data.   Target vectors are just the input vectors from 
    //   one time step in the past.    
    inputData = makeElmanVector();
    targetData = new double[inputData.length][inputData[0].length];
    System.arraycopy(inputData, 1,targetData, 0, inputData.length - 1);
    //print(Utils.doubleMatrixToString(inputData));
    //print("-------");
    //print(Utils.doubleMatrixToString(targetData));
    srn.getTrainingSet().setInputData(inputData);
    srn.getTrainingSet().setTargetData(targetData);

    // Train the SRN
    SRNTrainer trainer = new SRNTrainer(srn);
    trainer.randomize();
    trainer.setLearningRate(.1);
    trainer.setMomentum(0);
    for (int i = 0; i < trainingSteps; i++) {
        trainer.iterate();
        print("-->" + trainer.getError());
    }

    // Clear network, Update graphics
    network.clearActivations();
    network.fireNeuronsUpdated();

}

//
// Add the reader world which reads in the phonemes, and the diplay world which displays the current prediction.
//
void buildReaderWorld() {

    // Reader world
    WorkspaceComponent readerWorldComponent = new ReaderComponent("Word-stream (ba, dii, guuu)");    
    readerWorld = readerWorldComponent.getWorld();
    readerWorld.loadTokenToVectorDict(Utils.getStringMatrix(new File("./simulations/tables/elmanPhonemes.csv")));
    readerWorld.setParseStyle(ParseStyle.CHARACTER);
    workspace.addWorkspaceComponent(readerWorldComponent);
    desktop.getDesktopComponent(readerWorldComponent).getParentFrame().setBounds(17,15,418,308);

    // Couple reader world to network
    PotentialProducer readerWorldProducer = readerWorldComponent.getPotentialProducers().get(0); // Assumes vector thing is first
    PotentialConsumer inputLayerConsumer = networkComponent.getAttributeManager().createPotentialConsumer(srn.getInputLayer(),"setInputValues", double[].class);
    workspace.getCouplingManager().addCoupling(new Coupling(readerWorldProducer, inputLayerConsumer));
}


//
// Add the reader world which reads in the phonemes, and the diplay world which displays the current prediction.
//
void buildDisplayWorld() {

    WorkspaceComponent displayComponent = new DisplayComponent("Predicted phonemes");    
    workspace.addWorkspaceComponent(displayComponent);
    displayWorld = displayComponent.getWorld();
    desktop.getDesktopComponent(displayComponent).getParentFrame().setBounds(16,318,412,310);
    displayWorld.loadVectorToTokenDict(Utils.getStringMatrix(new File("./simulations/tables/elmanPhonemes.csv")));

    // dict.addEntry("b", new double[] {1,0,1,0,0,1} );
    // dict.addEntry("d", new double[] {1,0,1,1,0,1} );
    // dict.addEntry("g", new double[] {1,0,1,0,1,1} );
    // dict.addEntry("a", new double[] {0,1,0,0,1,1} );
    // dict.addEntry("l", new double[] {0,1,0,1,0,1} );
    // dict.addEntry("u", new double[] {0,1,0,1,1,1} );              

    // // Couple network to display world
    // PotentialConsumer displayWorldConsumer = displayComponent.getStringConsumer();
    // PotentialProducer wordLayerProducer = networkComponent.getAttributeManager()
    // .createPotentialProducer(wordLayer, "getLabelsOfActiveNeurons",
    //     String.class, new Class[] { double.class },
    //     new Object[] { displayWordThreshold });
    // workspace.getCouplingManager().addCoupling(new Coupling(wordLayerProducer, displayWorldConsumer));
    displayWorld.addText("Predicted\tActual\t Error \n");  
}

//
// Load the custom network updater
//
void loadCustomUpdater() {


    NetworkUpdateAction networkUpdateAction = new NetworkUpdateAction() {
        public String getDescription() {
          return "Update SRN error";
        }

        public String getLongDescription() {
            return "Update SRN Error (since this is not part of regular training, but rather being computed on  each workspace iteration";
        }

        public void invoke() {
            // What is the next character in the reader world
            String nextChar = readerWorld.previewNextChar();
            // Find the vector associated with that character
            double[] vec = readerWorld.getMatchingVector(nextChar);
            // Error is the distance between the output now and the vector for the next character
            //print(nextChar + "-->" + Arrays.toString(vec));
            double error;
            if (vec != null) {
                try {
                    error = SimbrainMath.getMeanSquaredError(srn.getOutputLayer().getActivations(), vec);        
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            // Predicted next phoneme is the character corresponding to the current output
            String predictedPhoneme = displayWorld.getClosestWord(srn.getOutputLayer().getActivations());
            //print(Arrays.toString(srn.getOutputLayer().getActivations()) + "-->" + predictedPhoneme);

            // Display current info in display world
            displayWorld.addText(predictedPhoneme + "\t" + nextChar + "\t " + Utils.round(error,3) + "\n");  
        }

      };
  network.addUpdateAction(networkUpdateAction);
  
}


//
// Make the string of phonemes
//
double[][] makeElmanVector() {
    phonemeString = makeElmanString();
    double[][] retMatrix = new double[phonemeString.length()][6];
    readerWorld.setText(phonemeString);
    for (int i = 0; i < phonemeString.length(); i++) {
        readerWorld.update();
        System.arraycopy(readerWorld.getCurrentVector(), 0, retMatrix[i], 0, 6);
    }
    
    return retMatrix;
}

//
// Make the string of phonemes
//
String makeElmanString() {
    StringBuilder list = new StringBuilder();
    for (int i = 0; i < strlength; i++) {
        Random generator = new Random();
        int number = generator.nextInt(3);
        switch (number) {
            case 0:
            list.append("ba");
            break;
            case 1:
            list.append("dii");
            default:
            list.append("guuu");
            break;
        }
    }
    return list.toString();
}

//
// Run the simulation
//
main();