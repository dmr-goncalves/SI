help_beanshell() {
   print("");
   print("  addClassPath( string | URL ): Add the specified directory or JAR file to the class path.");
   print("  bg( String filename ): Source a command in its own thread in the caller's namespace");
   print("  bind( bsh .This ths , bsh .NameSpace namespace ): Bind bsh object into a particular namespace and interpreter");
   print("  browseClass( String | Object | Class ): Open the class browser to view the specified class.");
   print("  cat( arg ): Print the contents of filename, url or stream)");
   print("  cd(dir): to change direcory");
   print("  classBrowser(): Opens the class browser");
   print("  clear(): Clear all variables, methods, and imports from this namespace");
   print("  cp( String fromFile, String toFile ): Copy a file");
   print("  debug(): Toggle on and off debug mode");
   print("  desktop(): to open the beanshell desktop");
   print("  dir(): list contents of directory");
   print("  dirname( String pathname ): Return directory portion of path based on the system default file separator");
   print("  editor(): Open a GUI editor from the command line or in the GUI desktop mode");
   print("  error( item ): Print the item as an error");
   print("  eval( String expression ): Evaluate the string in the current interpreter");
   print("  exec( String arg ): Start an external application using the Java Runtime exec() method");
   print("  exit( ): Conditionally exit the virtual machine");
   print("  extend( This object ): Return a new object that is a child of the specified object");
   print("  Frame | JFrame | JInternalFrame frame( Component component ): Show component in a frame, centered and packed, handling disposal with close button");
   print("  getBshPrompt( ): Get the value to display for the bsh interactive prompt");
   print("  getClass( String name ): Get a class through the current namespace utilizing the current imports, extended classloader, etc");
   print("  getClassPath( ): Get the current classpath including all user path, extneded path, and bootstrap JAR file if possible");
   print("  getResource( string path ): Get a resource from the BeanShell classpath");
   print("  getSourceFileInfo( ): Return the name of the file or source from which the current interpreter is reading");
   print("  importCommands( resource path | package name ): Import scripted or compiled BeanShell commands in the following package in the classpath");
   print("  javap( String | Object | Class | classIdentifier ): Print the public fields and methods of the specified class");
   print("  load( String filename ): Load a serialized Java object filename");
   print("  makeWorkspace( String name ): open a new workspace in the GUI desktop");
   print("  mv( String fromFile, String toFile ): Rename a file");
   print("  object( ): Return an \"empty\" BeanShell object context which can be used to hold data items");
   print("  pathToFile( String filename ): Create a File object corresponding to the specified file path name, taking into account the bsh current working directory");
   print("  print( arg ): Print the string value of the argument, which may be of any type");
   print("  pwd( ): Print the BeanShell working directory");
   print("  reloadClasses( [package name] ): Reload the specified class, package name, or all classes if no name is given");
   print("  rm( String pathname ): Remove a file");
   print("  run( String filename, Object runArgument | String filename): Run a command in its own private golbal namespace, with its own class manager and interpreter context");
   print("  save( Object obj, String filename ): Save a serializable Java object to filename");
   print("  server( int port ): Create a remote BeanShell listener service attached to the current interpreter, listening on the specified port");
   print("  setAccessibility( boolean b ): Setting accessibility on enables to privte an other non-public fields and methods");
   print("  setClassPath( URL[] ): Change the classpath to the specified array of directories and/or archives");
   print("  setFont( Component comp, int ptsize ): Change the point size of the specified component, to ptsize");
   print("  setNameCompletion( boolean bool ): Turn name  completion in the GUI console on or off");
   print("  setNameSpace( ns ): Set the namespace (context) of the current scope");
   print("  setStrictJava( boolean val ): Enable or disable \"Strict Java Mode\"");
   print("  show( ): Toggle on or off displaying the reuslts of expressions (Default: off)");
   print("  source( String filename | URL url ): Read filename into the interpreter and evaluate it in the current namespace");
   print("  sourceRelative( String file ): Source a file relative to the callering script's directory");
   print("  super( String scopename ): Return a BeanShell \'this\' reference to the enclosing scope (method scope) of the specified name");
   print("  unset( String name ): \"Undefine\" the variable specified by \'name\' (So that it test == void)");
   print("  which( classIdentifier | string | class ): Maps the entire classpath and prints all occurrences");
   print("  workspaceEditor( bsh.Interpreter parent, String name ): Make a new workspaceEditor in the GUI");
   print("");
}
